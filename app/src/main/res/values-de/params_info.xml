<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- VM -->
    <string name="admin_reserve_kbytes">The amount of free memory in the system that should be reserved for users with the capability cap_sys_admin</string>
    <string name="block_dump">Enables block I/O debugging when set to a nonzero value</string>
    <string name="compact_memory">Available only when CONFIG_COMPACTION is set. When 1 is written to the file, all zones are compacted such that free memory is available in contiguous blocks where possible.</string>
    <string name="compact_unevictable_allowed">Available only when CONFIG_COMPACTION is set. When set to 1, compaction is allowed to examine the unevictable lru (mlocked pages) for pages to compact. Set to 0 to prevent compaction from moving pages that are unevictable. Default value is 1.</string>
    <string name="dirty_background_bytes">Contains the amount of dirty memory at which the background kernel flusher threads will start writeback.</string>
    <string name="dirty_background_ratio">Contains, as a percentage of total available memory that contains free pages and reclaimable pages, the number of pages at which the background kernel flusher threads will start writing out dirty data.</string>
    <string name="dirty_bytes">Contains the amount of dirty memory at which a process generating disk writes will itself start writeback. Note: dirty_bytes is the counterpart of dirty_ratio. Only one of them may be specified at a time.</string>
    <string name="dirty_expire_centisecs">Used to define when dirty data is old enough to be eligible for writeout by the kernel flusher threads. It is expressed in 100\'ths of a second. Data which has been dirty in-memory for longer than this interval will be written out next time a flusher thread wakes up.</string>
    <string name="dirty_ratio">Contains, as a percentage of total available memory that contains free pages and reclaimable pages, the number of pages at which a process which is generating disk writes will itself start writing out dirty data.</string>
    <string name="dirtytime_expire_seconds">This tunable is used to define when dirty inode is old enough to be eligible for writeback by the kernel flusher threads. When a lazytime inode is constantly having its pages dirtied, the inode with an updated timestamp will never get chance to be written out.</string>
    <string name="dirty_writeback_centisecs">The kernel flusher threads will periodically wake up and write \"old\" data out to disk. This tunable expresses the interval between those wakeups, in 100\'ths of a second. Setting this to zero disables periodic writeback altogether.</string>
    <string name="drop_caches">Writing 1, 2 or 3 to this will cause the kernel to drop clean caches, as well as reclaimable slab objects like dentries and inodes. Once dropped, their memory becomes free.</string>
    <string name="extfrag_threshold">This parameter affects whether the kernel will compact memory or direct reclaim to satisfy a high-order allocation. Values tending towards 0 imply allocations would fail due to lack of memory, values towards 1000 imply failures are due to fragmentation and -1 implies that the allocation will succeed as long as watermarks are met.\n\nDefault: 500.</string>
    <string name="highmem_is_dirtyable">Controls whether the high memory is considered for dirty writers throttling</string>
    <string name="laptop_mode">This is a knob that controls \"laptop mode\". Laptop mode is used to minimize the time that the disk needs to be spun up, to conserve battery power.</string>
    <string name="legacy_va_layout">If non-zero, this sysctl disables the new 32-bit mmap layout - the kernel will use the legacy (2.4) layout for all processes.</string>
    <string name="max_map_count">This file contains the maximum number of memory map areas a process may have. While most applications need less than a thousand maps, certain programs, particularly malloc debuggers, may consume lots of them, e.g., up to one or two maps per allocation. The default value is 65536.</string>
    <string name="min_free_kbytes">This is used to force the Linux VM to keep a minimum number of kilobytes free. Setting this too high will OOM your machine instantly.</string>
    <string name="mmap_min_addr">This file indicates the amount of address space  which a user process will be restricted from mmapping</string>
    <string name="mmap_rnd_bits">This value can be used to select the number of bits to use to determine the random offset to the base address of vma regions resulting from mmap allocations on architectures which support tuning address space randomization. This value will be bounded by the architecture\'s minimum and maximum supported values.</string>
    <string name="mmap_rnd_compat_bits">This value can be used to select the number of bits to use to determine the random offset to the base address of vma regions resulting from mmap allocations for applications run in compatibility mode on architectures which support tuning address space randomization. This value will be bounded by the architecture\'s minimum and maximum supported values.</string>
    <string name="oom_dump_tasks">Enables a system-wide task dump (excluding kernel threads) to be produced when the kernel performs an OOM-killing. If this is set to zero, this information is suppressed. If this is set to non-zero, this information is shown whenever the OOM killer actually kills a memory-hogging task.</string>
    <string name="oom_kill_allocating_task">This enables or disables killing the OOM-triggering task in out-of-memory situations. If this is set to non-zero, the OOM killer simply kills the task that triggered the out-of-memory condition. This avoids the expensive tasklist scan.</string>
    <string name="overcommit_kbytes">When overcommit_memory is set to 2, the committed address space is not permitted to exceed swap plus this amount of physical RAM. Note: overcommit_kbytes is the counterpart of overcommit_ratio. Only one of them may be specified at a time.</string>
    <string name="overcommit_memory">This value contains a flag that enables memory overcommitment.\n\nWhen this flag is 0, the kernel attempts to estimate the amount of free memory left when userspace requests more memory.\n\nWhen this flag is 1, the kernel pretends there is always enough memory until it actually runs out.\n\nWhen this flag is 2, the kernel uses a \"never overcommit\" policy that attempts to prevent any overcommit of memory.</string>
    <string name="overcommit_ratio">When overcommit_memory is set to 2, the committed address space is not permitted to exceed swap plus this percentage of physical RAM</string>
    <string name="page_cluster">Controls the number of pages up to which consecutive pages are read in from swap in a single attempt. This is the swap counterpart to page cache readahead. It is a logarithmic value - setting it to zero means \'1 page\', setting it to 1 means \'2 pages\', setting it to 2 means \'4 pages\', etc.\nZero disables swap readahead completely.</string>
    <string name="panic_on_oom">This enables or disables panic on out-of-memory feature.</string>
    <string name="percpu_pagelist_fraction">This is the fraction of pages at most in each zone that are allocated for each per cpu page list. The min value for this is 8.</string>
    <string name="stat_interval">The time interval between which vm statistics are updated. The default is 1 second.</string>
    <string name="swappiness">This control is used to define how aggressive the kernel will swap memory pages. Higher values will increase aggressiveness, lower values decrease the amount of swap. Default: 60.</string>

    <!-- Kernel/Random -->
    <string name="boot_id">Uniquely identifies the current boot.</string>
    <string name="entropy_avail">Current available entropy.</string>
    <string name="poolsize">Maximum limit of bits that the entropy pool can hold.</string>
    <string name="read_wakeup_threshold">The number of bits of entropy required to be available before allowing reading from the random interfaces.</string>
    <string name="write_wakeup_threshold">Threshold for entropy_avail at which devices blocking are woken up to write to the entropy pool.</string>

    <!-- NET/Core -->
    <string name="busy_read">Low latency busy poll timeout for socket reads. (needs CONFIG_NET_RX_BUSY_POLL) Approximate time in us to busy loop waiting for packets on the device queue. This sets the default value of the SO_BUSY_POLL socket option. Default: 0 (off).</string>
    <string name="busy_poll">Low latency busy poll timeout for poll and select. (needs CONFIG_NET_RX_BUSY_POLL) Approximate time in us to busy loop waiting for events. Recommended value depends on the number of sockets you poll on. For several sockets 50, for several hundreds 100. Default: 0 (off).</string>
    <string name="default_qdisc">The default queuing discipline to use for network devices. This allows overriding the default of pfifo_fast with an alternative. Default: pfifo_fast.</string>
    <string name="dev_weight">The maximum number of packets that kernel can handle on a NAPI interrupt, it is a Per-CPU variable.</string>
    <string name="message_burst">Message_burst and message_cost are used to limit the warning messages written to the kernel log from the networking code. They enforce a rate limit to make a DOS attack impossible. A higher message_cost factor, results in fewer messages that will be written. Message_burst controls when messages will be dropped. The default settings limit warning messages to one every five seconds.</string>
    <string name="message_cost">Message_burst and message_cost are used to limit the warning messages written to the kernel log from the networking code. They enforce a rate limit to make a DOS attack impossible. A higher message_cost factor, results in fewer messages that will be written. Message_burst controls when messages will be dropped. The default settings limit warning messages to one every five seconds.</string>
    <string name="warnings">[No longer used] This was used to control console messages from the networking stack that occur because of problems on the network like duplicate address or bad checksums.</string>
    <string name="netdev_budget">Maximum number of packets taken from all interfaces in one polling cycle (NAPI poll)</string>
    <string name="optmem_max">Maximum ancillary buffer size allowed per socket. Ancillary data is a sequence of struct cmsghdr structures with appended data.</string>
    <string name="rmem_default">The default setting of the socket receive buffer in bytes.</string>
    <string name="rmem_max">The maximum receive socket buffer size in bytes.</string>
    <string name="wmem_default">The default setting (in bytes) of the socket send buffer.</string>
    <string name="wmem_max">The maximum send socket buffer size in bytes.</string>

</resources>